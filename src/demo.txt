<template>
	<VSelect :value="languageId" :label="label" :items="languages" @input="$emit('input', $event)" />
</template>

<script lang="ts">
import { Component, Prop, Popup } from 'common/vue';
import { inject } from 'common/di';
import { LanguagesClient } from 'api/admin/languages';
import { INotificationModel, IJobModelForCustomer } from 'api/admin/notifications';

interface IModel {
    value: string;
}

@Component({ i18n, components: { NotificationTemplate, MdButton } })
export default class LanguageSelector extends Popup<IJobModelForCustomer> {
	private readonly languagesApi = inject(LanguagesClient);
	private readonly languagesStore = inject(LanguagesStore);

	@Prop({ type: Object, required: true })
    public value: INotificationModel;

    @Prop(Array)
    errors: IQAErrorModel[];

    @Prop
    simple: string;

    @Prop
    isShown: boolean;

    @Prop({ type: Array, required: true })
    tqs: IQAErrorModel[];

    @Prop({ type: Boolean, required: true })
    public valueB: boolean;

	@Prop({ type: Number })
	public readonly languageId: number;

	@Prop({ type: String })
	public readonly label: string;

	public languages: any[] = [];
	public currency = Currency;
    public files: IFileModel[] = null;
    public file: IFileModel = null;
    isShownResults = true
    ids: string[] = null

    @Validate({
    		required: 'trim',
    })
    public legalName: string = null;

    @Validate({ required: true })
    get selectedLanguagesTo() {
    	return this.languagesStore.isTargetLanguageRTL;
    }

	@Validate({ required: true })
    get selectedLanguageFrom() {
    		return this.languagesStore.isTargetLanguageRTL;
   }

   set selectedLanguageFrom() {
    		this.$v.selectedLanguageFrom.$touch();
    		this.$emit('on-data-change');
   }

   get cancelButtonText() {
   		return this.value ? this.value : (this.$t('Cancel') as string);
   	}

   get modelValue() {
        return this.value
   }

   	get isEditTeamPage() {
   		return this.$route.name === 'TeamManagement';
   	}

   set modelValue(str: string) {
        this.$emit('update', str);
   }

	public async created() {
		const languages = await this.languagesApi.getAvailableLanguages();
		if (this.$slots.activator) {
		    console.log('activator');
		}
		this.languages = languages.map((l) => {
			return { value: l.id, text: l.name };
		});
	}

	public async calc(a: number, b: number) {
    	return a + b;
	}

	mounted() {
    		this.$nextTick();
    		(this.$refs.inputLabel as HTMLElement).focus();
    		const { y, height } = (this.$refs.labelbutton as HTMLElement).getBoundingClientRect();
    		const layout = document.getElementById('layout-top-left-container').clientHeight;
    }
}
</script>
